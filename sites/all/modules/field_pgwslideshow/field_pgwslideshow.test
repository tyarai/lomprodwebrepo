<?php
/**
 * @file
 * Tests for the field_pgwslideshow module.
 */

/**
 * Tests the pgwslideshow module.
 */
class FieldPgwslideshowWebTests extends ImageFieldTestCase {

  /**
   * The content type containing an image field set to display as a slideshow.
   *
   * @var string
   */
  public $slideshowContentTypeMachineName;

  /**
   * The field set to display as a PgwSlideshow.
   *
   * @var string
   */
  public $slideshowFieldMachineName;

  /**
   * The HTML ID of the field set to display as a PgwSlideshow.
   *
   * @var string
   */
  public $slideshowFieldId;

  /**
   * A node containing a populated PgwSlideshow.
   *
   * @var object
   */
  public $slideshowContent;

  /**
   * A user with administrative permissions.
   *
   * @var object
   */
  public $adminUser;

  /**
   * Whether the PgwSlideshow library is installed in the test environment.
   *
   * @var bool
   */
  public $libraryInstalledInTestEnvironment = FALSE;

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    // Note: getInfo() strings are not translated with t().
    return array(
      'name' => 'Field PgwSlideshow',
      'description' => 'A field formatter to output a field with Pagawa\'s PgwSlideshow.',
      'group' => 'field_pgwslideshow',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    // SimpleTest Turbo makes things really fast. Let's use it if we can.
    if (module_exists('simpletest_turbo')) {
      $id = simpletest_turbo_id('simpletest_turboOptimized');
      if (db_table_exists('fasttest' . $id . 'node')) {
        $this->prepareDatabasePrefix();
        $this->prepareEnvironment();
        $this->changeDatabasePrefix();
        simpletest_turbo_copy_tables('fasttest' . $id, $this->databasePrefix);
        variable_set('file_public_path', $this->public_files_directory);
        variable_set('file_private_path', $this->private_files_directory);
        variable_set('file_temporary_path', $this->temp_files_directory);
        $this->setup = TRUE;
      }
      else {
        parent::setUp();
        simpletest_turbo_copy_tables($this->databasePrefix, 'fasttest' . $id);
      }
    }
    else {
      parent::setUp();
    }

    // Enable the modules we need.
    module_enable(array(
      'field',
      'field_sql_storage',
      'image',
      'file',
      'jquery_update',
      'libraries',
      'node',
      'field_pgwslideshow',
    ));

    // Create an administrative user and log in.
    $this->adminUser = $this->drupalCreateUser(array(
      'access content',
      'access administration pages',
      'administer site configuration',
      'administer content types',
      'administer nodes',
      'create article content',
      'edit any article content',
      'delete any article content',
      'administer image styles',
      'bypass node access',
    ));
    $this->drupalLogin($this->adminUser);
    $this->drupalGet('admin/people/permissions');

    // Create a content type with an image field.
    $this->slideshowContentTypeMachineName = strtolower($this->randomName());
    $this->drupalCreateContentType(array(
      'type' => $this->slideshowContentTypeMachineName,
      'name' => $this->slideshowContentTypeMachineName,
    ));
    $this->slideshowFieldMachineName = strtolower($this->randomName());
    $this->createImageField($this->slideshowFieldMachineName, $this->slideshowContentTypeMachineName);

    // Set the image field to use the PgwSlideshow formatter, with default
    // settings.
    $formatter_info = field_pgwslideshow_field_formatter_info();
    $instance = field_info_instance('node', $this->slideshowFieldMachineName, $this->slideshowContentTypeMachineName);
    $instance['display']['default']['type'] = 'pgwslideshow_formatter';
    $instance['display']['default']['settings'] = $formatter_info['pgwslideshow_formatter']['settings'];
    field_update_instance($instance);

    // Create a node of the content type and upload an image.
    $test_image = current($this->drupalGetTestFiles('image'));
    $nid = $this->uploadNodeImage($test_image, $this->slideshowFieldMachineName, $this->slideshowContentTypeMachineName);
    $this->slideshowContent = node_load($nid, NULL, TRUE);

    // Store the ID.
    $this->slideshowFieldId = drupal_html_id('node' . '_' . $this->slideshowFieldMachineName);

    // Determine if the library is installed in the test environment. I haven't
    // figured out a way to get Drupal.org's testbot to download the library
    // automatically, so for now, we're going to limit which tests are run if it
    // is not installed. We'll also display a debug message reminding people to
    // test on an environment where it is installed.
    $library = libraries_detect('PgwSlideshow');
    $this->libraryInstalledInTestEnvironment = $library['installed'];
    if (!$this->libraryInstalledInTestEnvironment) {
      debug('The PgwSlideshow module is not installed in the test environment. Please install it for full test coverage.');
    }
  }

  /**
   * Test that the HTML needed to make a PgwSlideshow field gets output.
   */
  public function testExpectedHtmlOutput() {
    // Load the node and ensure it outputs the correct HTML.
    $this->drupalGet('node/' . $this->slideshowContent->nid);
    $this->assertRaw('field_pgwslideshow.css', 'Library integration CSS included in page output.');
    if ($this->libraryInstalledInTestEnvironment) {
      $this->assertRaw('field_pgwslideshow.js', 'Library integration JavaScript included in page output.');
    }
    $this->assertRaw('"field_pgwslideshow":{"' . $this->slideshowFieldId . '"', 'Drupal.settings contains field settings.');
    $this->assertRaw('id="' . $this->slideshowFieldId . '"', 'HTML element with field ID included in page output.');
  }

  /**
   * Test that changing themes and minification settings includes correct files.
   */
  public function testCorrectLibraryFilesOutput() {
    // Try the unminified dark theme.
    $instance = field_info_instance('node', $this->slideshowFieldMachineName, $this->slideshowContentTypeMachineName);
    $instance['display']['default']['settings']['style'] = 'dark';
    $instance['display']['default']['settings']['minified'] = FALSE;
    field_update_instance($instance);
    $this->drupalGet('node/' . $this->slideshowContent->nid);
    if ($this->libraryInstalledInTestEnvironment) {
      $this->assertRaw('pgwslideshow.js', 'Unminified library JavaScript included in page output.');
      $this->assertRaw('pgwslideshow.css', 'Dark, unminified library CSS included in page output.');
    }

    // Try the minified dark theme.
    $instance = field_info_instance('node', $this->slideshowFieldMachineName, $this->slideshowContentTypeMachineName);
    $instance['display']['default']['settings']['style'] = 'dark';
    $instance['display']['default']['settings']['minified'] = TRUE;
    field_update_instance($instance);
    $this->drupalGet('node/' . $this->slideshowContent->nid);
    if ($this->libraryInstalledInTestEnvironment) {
      $this->assertRaw('pgwslideshow.min.js', 'Minified library JavaScript included in page output.');
      $this->assertRaw('pgwslideshow.min.css', 'Dark, minified library CSS included in page output.');
    }

    // Try the unminified light theme.
    $instance = field_info_instance('node', $this->slideshowFieldMachineName, $this->slideshowContentTypeMachineName);
    $instance['display']['default']['settings']['style'] = 'light';
    $instance['display']['default']['settings']['minified'] = FALSE;
    field_update_instance($instance);
    $this->drupalGet('node/' . $this->slideshowContent->nid);
    if ($this->libraryInstalledInTestEnvironment) {
      $this->assertRaw('pgwslideshow.js', 'Unminified library JavaScript included in page output.');
      $this->assertRaw('pgwslideshow_light.css', 'Light, unminified library CSS included in page output.');
    }

    // Try the minified light theme.
    $instance = field_info_instance('node', $this->slideshowFieldMachineName, $this->slideshowContentTypeMachineName);
    $instance['display']['default']['settings']['style'] = 'light';
    $instance['display']['default']['settings']['minified'] = TRUE;
    field_update_instance($instance);
    $this->drupalGet('node/' . $this->slideshowContent->nid);
    if ($this->libraryInstalledInTestEnvironment) {
      $this->assertRaw('pgwslideshow.min.js', 'Minified library JavaScript included in page output.');
      $this->assertRaw('pgwslideshow_light.min.css', 'Light, minified library CSS included in page output.');
    }
  }

}
