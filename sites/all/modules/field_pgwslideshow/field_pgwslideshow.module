<?php
/**
 * @file
 * Hooks and helper functions for the field_pgwslideshow module.
 */

/* Hooks. */

/**
 * Implements hook_libraries_info().
 */
function field_pgwslideshow_libraries_info() {
  $libraries = array();

  // The PgwSlideshow library.
  // This JavaScript library has both a "normal" and a minified version. It also
  // comes with a light and a dark theme, so there are four variants. The
  // default files array has been intentionally duplicated as the "dark" variant
  // to make it easier to switch between them in code later on.
  $libraries['PgwSlideshow'] = array(
    'name' => 'PgwSlideshow',
    'vendor url' => 'https://github.com/Pagawa/PgwSlideshow',
    'download url' => 'https://github.com/Pagawa/PgwSlideshow/releases',
    'download file url' => 'https://github.com/Pagawa/PgwSlideshow/archive/2.0.1.tar.gz',
    'version arguments' => array(
      'file' => 'pgwslideshow.js',
      'pattern' => '@PgwSlideshow[\s]+-[\s]+Version ([0-9a-zA-Z\.-]+)@',
    ),
    'files' => array(
      'js' => array('pgwslideshow.js'),
      'css' => array('pgwslideshow.css'),
    ),
    'variants' => array(
      // The "dark" variant is the same as the default.
      'dark' => array(
        'files' => array(
          'js' => array('pgwslideshow.js'),
          'css' => array('pgwslideshow.css'),
        ),
      ),
      'dark_minified' => array(
        'files' => array(
          'js' => array('pgwslideshow.min.js'),
          'css' => array('pgwslideshow.min.css'),
        ),
      ),
      'light' => array(
        'files' => array(
          'js' => array('pgwslideshow.js'),
          'css' => array('pgwslideshow_light.css'),
        ),
      ),
      'light_minified' => array(
        'files' => array(
          'js' => array('pgwslideshow.min.js'),
          'css' => array('pgwslideshow_light.min.css'),
        ),
      ),
    ),
    'integration files' => array(
      'field_pgwslideshow' => array(
        'js' => array('field_pgwslideshow.js'),
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_field_formatter_info().
 */
function field_pgwslideshow_field_formatter_info() {
  $info = array();

  // Display the contents of a field as a slideshow.
  $info['pgwslideshow_formatter'] = array(
    'label' => t('PgwSlideshow'),
    'description' => t('Displays the contents of the field as a PgwSlideshow.'),
    'field types' => array('image','entity_reference'),
    'settings' => array(
      'style' => 'dark',
      'minified' => TRUE,
      'transition_effect' => 'sliding',
      'auto_slide' => FALSE,
      'display_list' => FALSE,
      'display_controls' => TRUE,
      'touch_controls' => TRUE,
      'max_height' => NULL,
      'adaptive_duration' => 200,
      'transition_duration' => 500,
      'interval_duration' => 3000,
    ),
  );

  return $info;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function field_pgwslideshow_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $settings = $instance['display'][$view_mode]['settings'];
  $settings_form = array();
  $field_prefix = 'fields[' . $field['field_name'] . '][settings_edit_form][settings]';

  // Whether to use the minified version of the library.
  $settings_form['minified'] = array(
    '#type' => 'checkbox',
    '#title' => t("Use the library's minified version"),
    '#description' => t("You probably want to use the minified version unless you're debugging."),
    '#default_value' => $settings['minified'],
  );

  // Which style to use.
  $settings_form['style'] = array(
    '#type' => 'select',
    '#title' => t('Slideshow style'),
    '#default_value' => $settings['style'],
    '#options' => array(
      'dark' => t('Dark variant'),
      'light' => t('Light variant'),
    ),
  );

  // Enable or disable listing carousel elements.
  $settings_form['display_list'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display list of carousel elements'),
    '#default_value' => $settings['display_list'],
  );

  // Enable or disable buttons on each side to display the previous or next
  // image.
  $settings_form['display_controls'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display previous / next controls'),
    '#default_value' => $settings['display_controls'],
  );

  // Bind touch movements to change between slides.
  $settings_form['touch_controls'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow touch controls to change between slides'),
    '#default_value' => $settings['touch_controls'],
  );

  // A maximum height for the slideshow.
  $settings_form['max_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum height'),
    '#description' => t('Maximum height in pixels. Leave this field empty for unlimited height.'),
    '#default_value' => $settings['max_height'],
    '#element_validate' => array('element_validate_integer_positive'),
  );

  // How to transition between slides.
  $settings_form['transition_effect'] = array(
    '#type' => 'select',
    '#title' => t('Transition effect'),
    '#default_value' => $settings['transition_effect'],
    '#options' => array(
      'sliding' => t('Sliding'),
      'fading' => t('Fading'),
    ),
  );

  // The time to spend adjusting the size of the slideshow.
  $settings_form['adaptive_duration'] = array(
    '#type' => 'textfield',
    '#title' => t('Adaptive duration'),
    '#description' => t('Time to spend adjusting the size of the slideshow, in milliseconds.'),
    '#default_value' => $settings['adaptive_duration'],
    '#element_validate' => array('element_validate_integer_positive'),
  );

  // The time to take changing between slides.
  $settings_form['transition_duration'] = array(
    '#type' => 'textfield',
    '#title' => t('Transition duration'),
    '#description' => t('Time to spend transitioning between slides, in milliseconds.'),
    '#default_value' => $settings['transition_duration'],
    '#element_validate' => array('element_validate_integer_positive'),
  );

  // Enable or disable the automatic transition between the gallery images.
  $settings_form['auto_slide'] = array(
    '#type' => 'checkbox',
    '#title' => t('Automatically transition between gallery images'),
    '#default_value' => $settings['auto_slide'],
  );

  // The time to wait before moving on to the next slide.
  $settings_form['interval_duration'] = array(
    '#type' => 'textfield',
    '#title' => t('Interval duration'),
    '#description' => t('Time to wait before moving on to the next image, in milliseconds.'),
    '#default_value' => $settings['interval_duration'],
    '#element_validate' => array('element_validate_integer_positive'),
    '#states' => array(
      'invisible' => array(
        ':input[name="' . $field_prefix . '[auto_slide]"]' => array(
          'checked' => FALSE,
        ),
      ),
    ),
  );

  return $settings_form;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function field_pgwslideshow_field_formatter_settings_summary($field, $instance, $view_mode) {
  $t_options = array('context' => 'field_pgwslideshow_field_formatter_settings_summary');
  $settings = $instance['display'][$view_mode]['settings'];

  return t('Display a @style-colored PgwSlideshow with @max_height maximum height, @display_controls controls, @touch_controls touch controls, and @display_list list, which @auto_slide @transition_effect between images, using the @minified sources.', array(
    '@style' => $settings['style'] === 'dark' ? t('dark', array(), $t_options) : t('light', array(), $t_options),
    '@minified' => ((bool) $settings['minified']) ? t('minified', array(), $t_options) : t('development', array(), $t_options),
    '@transition_effect' => $settings['transition_effect'] === 'sliding' ? t('slides', array(), $t_options) : t('fades', array(), $t_options),
    '@auto_slide' => ((bool) $settings['auto_slide']) ? t('automatically', array(), $t_options) : t('manually', array(), $t_options),
    '@display_list' => ((bool) $settings['display_list']) ? t('a visible', array(), $t_options) : t('an invisible', array(), $t_options),
    '@display_controls' => ((bool) $settings['display_controls']) ? t('visible', array(), $t_options) : t('invisible', array(), $t_options),
    '@touch_controls' => $settings['touch_controls'] ? t('active', array(), $t_options) : t('inactive', array(), $t_options),
    '@max_height' => empty($settings['max_height']) ? t('no', array(), $t_options) : t('a @size-pixel', array('@size' => $settings['max_height']), array(), $t_options),
    // Note that adaptive_duration, transition_duration, and interval_duration
    // are not used here.
  ));
}

/**
 * Implements hook_field_formatter_view().
 */
function field_pgwslideshow_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $slideshow_images = array();
  $slideshow_library_variant = NULL;
  $class = '';
  $unique_id = drupal_html_id($instance['entity_type'] . '_' . $instance['field_name']);

  // For some reason, the light theme styles uses the pgwSlideshowLight class.
  if ($display['settings']['style'] === 'light') {
    $class = 'pgwSlideshowLight';
  }
  else {
    $class = 'pgwSlideshow';
  }

  // Build a list of image tags.
  foreach ($items as $delta => $item) {
    // Remove the height and width attributes because they make it difficult for
    // CSS to alter the size of the images.
    unset($item['width']);
    unset($item['height']);

    // The theme_image() function expects a path.
    $item['path'] = file_create_url($item['uri']);

    // Theme the current image.
    $slideshow_images[$delta] = theme('image', $item);
  }

  // Theme the list of images.
  $element[0] = array(
    '#markup' => theme('item_list', array(
      'attributes' => array('class' => $class, 'id' => $unique_id),
      'items' => $slideshow_images,
    )),
  );

  // Figure out which variant to use.
  if ($display['settings']['style'] === 'dark' && $display['settings']['minified'] == FALSE) {
    $slideshow_library_variant = 'dark';
  }
  elseif ($display['settings']['style'] === 'dark' && $display['settings']['minified'] == TRUE) {
    $slideshow_library_variant = 'dark_minified';
  }
  elseif ($display['settings']['style'] === 'light' && $display['settings']['minified'] == FALSE) {
    $slideshow_library_variant = 'light';
  }
  elseif ($display['settings']['style'] === 'light' && $display['settings']['minified'] == TRUE) {
    $slideshow_library_variant = 'light_minified';
  }

  // Include the JavaScript, CSS, and integration files.
  libraries_load('PgwSlideshow', $slideshow_library_variant);

  // Prepare the settings and output them.
  $settings = _field_pgwslideshow_prepare_settings($display['settings'], $class);
  drupal_add_js(array('field_pgwslideshow' => array($unique_id => $settings)), 'setting');

  return $element;
}

/* Helper functons. */

/**
 * Prepare a settings array of options to be passed to the PgwSlideshow library.
 *
 * @param array $field_settings
 *   The field settings array.
 *
 * @return array
 *   An array of settings to be passed to drupal_add_js().
 */
function _field_pgwslideshow_prepare_settings($field_settings, $class = 'pgwSlideshow') {
  $pgw_settings = array();

  if (!empty($class)) {
    $pgw_settings['mainClassName'] = $class;
  }

  if (isset($field_settings['transition_effect'])) {
    $pgw_settings['transitionEffect'] = strval($field_settings['transition_effect']);
  }

  if (isset($field_settings['auto_slide'])) {
    $pgw_settings['autoSlide'] = (bool) $field_settings['auto_slide'];
  }

  if (isset($field_settings['display_list'])) {
    $pgw_settings['displayList'] = (bool) $field_settings['display_list'];
  }

  if (isset($field_settings['display_controls'])) {
    $pgw_settings['displayControls'] = (bool) $field_settings['display_controls'];
  }

  if (isset($field_settings['touch_controls'])) {
    $pgw_settings['touchControls'] = (bool) $field_settings['touch_controls'];
  }

  if (isset($field_settings['max_height'])) {
    if (empty($field_settings['max_height'])) {
      $pgw_settings['maxHeight'] = NULL;
    }
    else {
      $pgw_settings['maxHeight'] = intval($field_settings['max_height']);
    }
  }

  if (isset($field_settings['adaptive_duration'])) {
    $pgw_settings['adaptiveDuration'] = intval($field_settings['adaptive_duration']);
  }

  if (isset($field_settings['transition_duration'])) {
    $pgw_settings['transitionDuration'] = intval($field_settings['transition_duration']);
  }

  if (isset($field_settings['interval_duration'])) {
    $pgw_settings['intervalDuration'] = intval($field_settings['interval_duration']);
  }

  return $pgw_settings;
}
